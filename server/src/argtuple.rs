pub enum ArgTuple {
    One(String),
    Two(String, String),
    Three(String, String, String),
    Four(String, String, String, String),
    Five(String, String, String, String, String),
    Six(String, String, String, String, String, String),
    Seven(String, String, String, String, String, String, String),
    Eight(
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
    ),
    Nine(
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
    ),
    Ten(
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
        String,
    ),
    Unsupported,
}

pub fn to_tuple<'a>(s: Vec<&'a str>) -> ArgTuple {
    match s.len() - 1 {
        1 => ArgTuple::One(s[1].into()),
        2 => ArgTuple::Two(s[1].into(), s[2].into()),
        3 => ArgTuple::Three(s[1].into(), s[2].into(), s[3].into()),
        4 => ArgTuple::Four(s[1].into(), s[2].into(), s[3].into(), s[4].into()),
        5 => ArgTuple::Five(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
        ),
        6 => ArgTuple::Six(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
            s[6].into(),
        ),
        7 => ArgTuple::Seven(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
            s[6].into(),
            s[7].into(),
        ),
        8 => ArgTuple::Eight(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
            s[6].into(),
            s[7].into(),
            s[8].into(),
        ),
        9 => ArgTuple::Nine(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
            s[6].into(),
            s[7].into(),
            s[8].into(),
            s[9].into(),
        ),
        10 => ArgTuple::Ten(
            s[1].into(),
            s[2].into(),
            s[3].into(),
            s[4].into(),
            s[5].into(),
            s[6].into(),
            s[7].into(),
            s[8].into(),
            s[9].into(),
            s[10].into(),
        ),
        _ => ArgTuple::Unsupported,
    }
}
